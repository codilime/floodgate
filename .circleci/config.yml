version: 2.1

aliases:
  latest-gate-version: &default-gate-version
    gate_api_branch:
      type: string
      default: release-1.20.x
  supported-spinnaker-releases: &gate-versions
    gate_api_branch: [ "release-1.20.x", "release-1.19.x", "release-1.18.x" ]
  release-filters: &filters-release
    filters:
      branches:
        only:
          - /release-v[0-9]+\.[0-9]+\.x/
      tags:
        only:
         - /v[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?/

commands:
  install_toolset:
    description: "Install needed extra tools"
    steps:
      - run:
          name: Install tools
          command: |
            curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.7.0/kind-$(uname)-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/
    
  wait_for_dpkg:
    description: "Wait for packaging operations to finish"
    steps:
      - run:
          name: Wait for packaging operations to finish
          command: |
            sleep 10
            while systemctl status apt-daily >/dev/null || systemctl status apt-daily-upgrade >/dev/null || sudo fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock; do
              echo "waiting 30s for dpkg locks..."
              sleep 30
            done

jobs:
  generate_swagger:
    parameters: *default-gate-version
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      - run:
          name: Prepare extra directories
          command: |
            sudo mkdir /floodgate
            sudo chmod 777 /floodgate
            mkdir /floodgate/bin
      - run:
          name: Setup swagger-codegen
          command: |
            SWAGGER_VERSION=$(cat gateapi/.swagger-codegen/VERSION)
            wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/${SWAGGER_VERSION}/swagger-codegen-cli-${SWAGGER_VERSION}.jar -O swagger-codegen-cli.jar
            wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/${SWAGGER_VERSION}/swagger-codegen-cli-${SWAGGER_VERSION}.jar.sha1 -O swagger-codegen-cli.jar.sha1
            echo ' swagger-codegen-cli.jar' >> swagger-codegen-cli.jar.sha1
            sha1sum -c swagger-codegen-cli.jar.sha1 
            mv swagger-codegen-cli.jar /floodgate/bin/
      - run:
          name: Get gate code
          command: git clone https://github.com/spinnaker/gate.git -b << parameters.gate_api_branch >> /floodgate/gate
      - run:
          name: Generate swagger.json
          command: |
            cd /floodgate/gate
            ./gradlew clean
            ./gradlew gate-web:test --tests *GenerateSwagger* --max-workers 2
            cat gate-web/swagger.json | json_pp > ./gate-swagger.json
      - run:
          name: Generate gateapi go code
          command: java -jar /floodgate/bin/swagger-codegen-cli.jar generate -l go -i /floodgate/gate/gate-swagger.json -o /floodgate/gateapi
      - persist_to_workspace:
          root: /floodgate
          paths:
            - gate-swagger.json
            - gateapi
      - store_artifacts:
          path: /floodgate/gate/swagger/gate-swagger.json
          destination: gate-swagger.json

  build:
    parameters: *default-gate-version
    docker:
      - image: circleci/golang:1.14.1
        environment:
          GO111MODULE: "on"
    working_directory: /go/src/github.com/codilime/floodgate
    steps:
      - checkout
      - run:
          name: Remove gateapi dir
          command: rm -r gateapi
      - attach_workspace:
          at: ./
      - run: 
          name: Get dependencies
          command: |
            go mod download
            go get -u golang.org/x/lint/golint
      - run: 
          name: Examine source code with go vet
          command: go vet -v ./...
      - run: 
          name: Execute go tests
          command: go test -v ./...
      - run:
          name: Compile code
          command: |
            if [ -z "$CIRCLE_BRANCH" ]
            then
                export RELEASE=$(echo $CIRCLE_TAG | sed 's/^v[0-9]\+\.[0-9]\+\.[0-9]\+-\?//')
            else
                export RELEASE=$CIRCLE_BRANCH
            fi
            env
            go build -ldflags "-X github.com/codilime/floodgate/version.GitCommit=$CIRCLE_SHA1 \
            -X github.com/codilime/floodgate/version.BuiltDate=$(date  +%Y-%m-%d_%H:%M:%S) \
            -X github.com/codilime/floodgate/version.Release=$RELEASE \
            -X github.com/codilime/floodgate/version.GoVersion=$GOLANG_VERSION \
            -X github.com/codilime/floodgate/version.GateVersion=$(echo '<< parameters.gate_api_branch >>' | sed 's/release-//') \
            "
      - run:
          name: Check linting
          command: |
            for GOSRCFILE in $( find . -type f -name '*.go' -not -path './gateapi/*')
            do
              golint -set_exit_status $GOSRCFILE
            done
      - run:
          name: Copy binaries for later use
          command: |
            sudo mkdir -p /floodgate/bin
            sudo chmod 777 /floodgate/bin
            cp /go/src/github.com/codilime/floodgate/floodgate /floodgate/bin/floodgate
      - run:
          name: Generate checksum
          command: |
            cd /go/src/github.com/codilime/floodgate/
            cp floodgate floodgate-<< parameters.gate_api_branch >>
            sha1sum floodgate-<< parameters.gate_api_branch >> > floodgate-<< parameters.gate_api_branch >>.sha1sum
      - persist_to_workspace:
          root: /floodgate/bin
          paths:
            - floodgate
      - store_artifacts:
          path: /go/src/github.com/codilime/floodgate/floodgate
          destination: floodgate-<< parameters.gate_api_branch >>
      - store_artifacts:
          path: /go/src/github.com/codilime/floodgate/floodgate-<< parameters.gate_api_branch >>.sha1sum
          destination: floodgate-<< parameters.gate_api_branch >>.sha1sum

  start_spinnaker:
    parameters: 
      <<: *default-gate-version
      floodgate_extra_params:
        type: string
        default: ""
    machine:
      image: ubuntu-1604:202004-01
    steps:
      - checkout
      - run:
          name: Update submodules - sponnet
          command: git submodule init && git submodule update
      - attach_workspace:
          at: ./
      - run:
          name: Prepare directories
          command: |
            sudo mkdir /floodgate
            sudo chmod 777 /floodgate
            mkdir -p /floodgate/bin
            mkdir -p /floodgate/libs
            mkdir -p /floodgate/resources
            cp -r sponnet /floodgate/libs/
            cp -r examples /floodgate/resources/
            cp floodgate /floodgate/bin/
            chmod +x /floodgate/bin/floodgate
      - install_toolset
      - run:
          name: Update /etc/hosts
          command: sudo bash -c 'echo "127.1.2.3 spinnaker" >> /etc/hosts'
      - wait_for_dpkg
      - run:
          name: Install Spinnaker and configure Floodgate       
          command: |
            export NEED_SPINNAKER_VERSION=$( echo << parameters.gate_api_branch >> | egrep -o "[0-9]\.[0-9]+" )
            .circleci/libs/install-and-run-spinnaker.sh
            until [ $( curl -w '%{http_code}' -o /dev/null http://spinnaker/api/v1 ) -eq 302 ]
            do
                echo "Waiting for Spinnaker"
                sleep 10
            done
      - run:
          name: Test Floodgate against running Spinnaker instance
          command: |
            /floodgate/bin/floodgate --version
            /floodgate/bin/floodgate version
            /floodgate/bin/floodgate << parameters.floodgate_extra_params >> --config ~/floodgate.yaml compare && exit 1 || echo "Found changes"
            /floodgate/bin/floodgate << parameters.floodgate_extra_params >> --config ~/floodgate.yaml sync
            /floodgate/bin/floodgate << parameters.floodgate_extra_params >> --config ~/floodgate.yaml compare

workflows:
  periodic:
    triggers:
      - schedule:
          cron: "15 2 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - generate_swagger:
          name: generate swagger api << matrix.gate_api_branch >>
          matrix:
            parameters: *gate-versions
      - build:
          name: build against gate << matrix.gate_api_branch >>
          matrix:
            parameters: *gate-versions
          requires:
            - generate swagger api << matrix.gate_api_branch >>
      - start_spinnaker:
          name: test floodgate with working spinnaker << matrix.gate_api_branch >>
          matrix:
            parameters: *gate-versions
          requires:
            - build against gate << matrix.gate_api_branch >>

  release:
    jobs:
      - generate_swagger:
          <<: *filters-release
          name: generate swagger api << matrix.gate_api_branch >>
          matrix:
            parameters: *gate-versions

      - build:
          <<: *filters-release
          name: build against gate << matrix.gate_api_branch >>
          matrix:
            parameters: *gate-versions
          requires:
            - generate swagger api << matrix.gate_api_branch >>
      - start_spinnaker:
          <<: *filters-release
          name: test floodgate with working spinnaker << matrix.gate_api_branch >>
          matrix:
            parameters: *gate-versions
          requires:
            - build against gate << matrix.gate_api_branch >>

  commit:
    jobs:
      - generate_swagger:
          name: generate swagger api
      - build:
          name: build
          requires:
            - generate swagger api
      - start_spinnaker:
          filters:
            branches:
              only:
                - master
          name: test floodgate with working spinnaker
          floodgate_extra_params: "-q"
          requires:
            - build
